generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id            Int         @id @default(autoincrement())
  name          String      @default("") @db.VarChar(128)
  active        Int?        @default(1) @db.TinyInt
  description   String?     @db.Text
  venue         String?     @db.Text
  location      String?     @db.Text
  notes         String?     @db.Text
  telephone     String?     @db.Text
  startDateTime DateTime?   @db.Timestamp(0)
  endDateTime   DateTime?   @db.Timestamp(0)
  createdAt     DateTime    @default(now()) @db.Timestamp(0)
  updatedAt     DateTime    @updatedAt
  songs         EventSong[]
}

model EventSong {
  eventId   Int
  songId    Int
  published Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], map: "EventSong_ibfk_1")
  song      Song     @relation(fields: [songId], references: [id], map: "EventSong_ibfk_2")

  @@id([eventId, songId])
  @@index([eventId], map: "eventId")
  @@index([songId], map: "songId")
}

model Instrument {
  id          Int              @id @default(autoincrement())
  name        String           @default("") @db.VarChar(128)
  active      Int?             @default(1) @db.TinyInt
  description String?          @db.Text
  createdAt   DateTime         @default(now()) @db.Timestamp(0)
  updatedAt   DateTime         @updatedAt
  songs       InstrumentSong[]
}

model InstrumentSong {
  notes        String?    @db.VarChar(128)
  words        String?    @db.Text
  mimeType     String?    @db.VarChar(128)
  file         String?    @db.Text
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt    DateTime   @updatedAt
  instrumentId Int
  songId       Int
  instruments  Instrument @relation(fields: [instrumentId], references: [id], map: "InstrumentSong_ibfk_1")
  songs        Song       @relation(fields: [songId], references: [id], map: "InstrumentSong_ibfk_2")

  @@id([instrumentId, songId])
  @@index([instrumentId], map: "instrumentId")
  @@index([songId], map: "songId")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now()) @db.Timestamp(0)
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique(map: "Session.handle_unique")
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int
  user               User      @relation(fields: [userId], references: [id], map: "Session_ibfk_1")

  @@index([userId], map: "userId")
}

model Song {
  id          Int              @id @default(autoincrement())
  title       String           @default("") @db.VarChar(128)
  active      Int?             @default(1) @db.TinyInt
  alias       String?          @db.VarChar(128)
  startKey    String?          @db.VarChar(15)
  tempoCd     Int?             @db.TinyInt
  startWords  String?          @db.Text
  arrangement String?          @db.Text
  createdAt   DateTime         @default(now()) @db.Timestamp(0)
  updatedAt   DateTime         @updatedAt
  tags        String?
  events      EventSong[]
  instruments InstrumentSong[]
}

model Token {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @updatedAt
  hashedToken String
  type        Token_type
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User       @relation(fields: [userId], references: [id], onDelete: NoAction, map: "Token_ibfk_1")

  @@unique([hashedToken, type], map: "Token.hashedToken_type_unique")
  @@index([userId], map: "userId")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @updatedAt
  email     String    @unique(map: "User.email_unique")
  name      String
  active    Int       @default(1) @db.TinyInt
  role      User_role @default(USER)
  password  String
  profile   Profile?
  sessions  Session[]
  tokens    Token[]
  @@unique([email, active], map: "User.email_active_unique")
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @updatedAt
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

enum Token_type {
  RESET_PASSWORD
}

enum User_role {
  USER
  EDITOR
  LEADER
  ADMIN
}
